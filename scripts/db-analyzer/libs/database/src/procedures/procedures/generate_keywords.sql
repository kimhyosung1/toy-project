-- ================================================================
-- PROCEDURE: generate_keywords
-- ================================================================
--
-- Description: No description available
--
-- Parameters:
--   (no parameters)
--

-- Created: 2025-04-26T09:11:07.000Z
-- Modified: 2025-04-26T09:11:07.000Z
-- Environment: dev
-- Database: public
--
-- Generated by: Enhanced DB Schema Analyzer
-- Generated at: 2025-09-12T23:07:12.701Z
-- ================================================================

DROP PROCEDURE IF EXISTS `generate_keywords`;

DELIMITER ;;

CREATE PROCEDURE `generate_keywords`()
BEGIN
    BEGIN
        DECLARE i INT DEFAULT 1;
        DECLARE batch INT DEFAULT 0;
        DECLARE author_name VARCHAR(50);
        DECLARE keyword_text VARCHAR(100);
        DECLARE name_suffix VARCHAR(10);
        DECLARE kw_suffix VARCHAR(20);

        -- 총 30개의 배치로 나누어 실행 (각 배치당 1000개)
        WHILE batch < @total_records / @batch_size DO
            -- 배치 시작 선언
            SET @sql = CONCAT('INSERT INTO tb_keyword_notification (author, keyword) VALUES ');
            SET i = 1;

            -- 각 배치의 1000개 레코드 생성
            WHILE i <= @batch_size DO
                -- 다양한 유형의 '안녕' 관련 키워드 생성
                SET name_suffix = FLOOR(RAND() * 10000);

                -- 키워드 유형 결정 (다양한 '안녕' 변형)
                CASE FLOOR(RAND() * 10)
                    WHEN 0 THEN SET keyword_text = '안녕';
                    WHEN 1 THEN SET keyword_text = CONCAT('안녕', FLOOR(RAND() * 100));
                    WHEN 2 THEN SET keyword_text = CONCAT('안녕하세요', FLOOR(RAND() * 100));
                    WHEN 3 THEN SET keyword_text = CONCAT('안녕!', REPEAT('!', FLOOR(RAND() * 3)));
                    WHEN 4 THEN SET keyword_text = CONCAT('안녕하십니까', FLOOR(RAND() * 50));
                    WHEN 5 THEN SET keyword_text = CONCAT('안녕히 가세요', FLOOR(RAND() * 50));
                    WHEN 6 THEN SET keyword_text = CONCAT('안녕히 계세요', FLOOR(RAND() * 50));
                    WHEN 7 THEN SET keyword_text = CONCAT('안녕안녕', FLOOR(RAND() * 20));
                    WHEN 8 THEN SET keyword_text = CONCAT('안녕만 안녕', FLOOR(RAND() * 10));
                    ELSE SET keyword_text = CONCAT('안녕_', FLOOR(RAND() * 1000));
                END CASE;

                -- 작성자 이름 생성
                CASE FLOOR(RAND() * 5)
                    WHEN 0 THEN SET author_name = CONCAT('김안녕', name_suffix);
                    WHEN 1 THEN SET author_name = CONCAT('이안녕', name_suffix);
                    WHEN 2 THEN SET author_name = CONCAT('박안녕', name_suffix);
                    WHEN 3 THEN SET author_name = CONCAT('최안녕', name_suffix);
                    ELSE SET author_name = CONCAT('정안녕', name_suffix);
                END CASE;

                -- SQL 쿼리에 값 추가
                SET @sql = CONCAT(@sql, '('', author_name, '', '', keyword_text, '')');

                -- 마지막 아이템이 아니면 콤마 추가
                IF i < @batch_size THEN
                    SET @sql = CONCAT(@sql, ',');
                END IF;

                SET i = i + 1;
            END WHILE;

            -- 배치 실행
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;

            -- 배치 카운터 증가
            SET batch = batch + 1;

            -- 진행 상황 출력
            SELECT CONCAT('Batch ', batch, ' of ', @total_records / @batch_size, ' completed. ', batch * @batch_size, ' records inserted.') AS Progress;

            -- 부하 방지를 위한 짧은 대기
            DO SLEEP(0.1);
        END WHILE;

        -- 완료 메시지
        SELECT CONCAT('Total ', @total_records, ' records inserted successfully.') AS Completion_Message;
    END
END

;;

DELIMITER ;
