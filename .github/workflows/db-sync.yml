name: 🔄 Database Schema Sync

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod
      force_update:
        description: 'Force update entities (overwrite existing)'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main
      - develop
    paths:
      - 'scripts/db-analyzer/**'
      - '.github/workflows/db-sync.yml'

  schedule:
    # 매일 새벽 3시에 자동 스키마 동기화 (dev 환경)
    - cron: '0 3 * * *'

env:
  NODE_VERSION: '18'
  MYSQL_VERSION: '8.0'

jobs:
  analyze-schema:
    name: 📊 Analyze Database Schema
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment:
          - ${{ github.event.inputs.environment || 'dev' }}

    outputs:
      schema-changed: ${{ steps.check-changes.outputs.changed }}
      entities-count: ${{ steps.analyze.outputs.entities-count }}
      procedures-count: ${{ steps.analyze.outputs.procedures-count }}

    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 2

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm install -g ts-node typescript
          npm install mysql2

      - name: 🔧 Setup Database Connection
        id: db-config
        run: |
          case "${{ matrix.environment }}" in
            "dev")
              echo "DB_HOST=${{ secrets.DEV_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.DEV_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USER=${{ secrets.DEV_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_NAME=${{ secrets.DEV_DB_NAME }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "DB_HOST=${{ secrets.QA_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.QA_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USER=${{ secrets.QA_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.QA_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_NAME=${{ secrets.QA_DB_NAME }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.PROD_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_NAME=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 🔍 Analyze Database Schema
        id: analyze
        run: |
          echo "🔍 Analyzing ${{ matrix.environment }} database schema..."

          # 임시 디렉토리 생성
          mkdir -p temp/schema-analysis

          # 스키마 분석 실행
          ts-node scripts/db-analyzer/schema-analyzer.ts

          # 분석 결과 확인
          if [ -f "temp/db-schema.json" ]; then
            ENTITIES_COUNT=$(jq '.tables | length' temp/db-schema.json)
            PROCEDURES_COUNT=$(jq '.procedures | length' temp/db-schema.json)
            
            echo "entities-count=$ENTITIES_COUNT" >> $GITHUB_OUTPUT
            echo "procedures-count=$PROCEDURES_COUNT" >> $GITHUB_OUTPUT
            
            echo "✅ Found $ENTITIES_COUNT tables and $PROCEDURES_COUNT procedures"
            
            # 스키마 파일을 환경별로 저장
            cp temp/db-schema.json temp/schema-analysis/${{ matrix.environment }}-schema.json
          else
            echo "❌ Schema analysis failed"
            exit 1
          fi

      - name: 📋 Compare with Previous Schema
        id: check-changes
        run: |
          echo "📋 Checking for schema changes..."

          SCHEMA_FILE="temp/schema-analysis/${{ matrix.environment }}-schema.json"
          PREV_SCHEMA="scripts/db-analyzer/previous-schemas/${{ matrix.environment }}-schema.json"

          if [ -f "$PREV_SCHEMA" ]; then
            if ! cmp -s "$SCHEMA_FILE" "$PREV_SCHEMA"; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "🔄 Schema changes detected!"
              
              # 변경 사항 요약 생성
              echo "## 📊 Schema Changes Detected" >> $GITHUB_STEP_SUMMARY
              echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
              echo "**Tables:** $(jq '.tables | length' $SCHEMA_FILE)" >> $GITHUB_STEP_SUMMARY
              echo "**Procedures:** $(jq '.procedures | length' $SCHEMA_FILE)" >> $GITHUB_STEP_SUMMARY
              echo "**Analyzed at:** $(jq -r '.database.analyzedAt' $SCHEMA_FILE)" >> $GITHUB_STEP_SUMMARY
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "✅ No schema changes detected"
            fi
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "🆕 First time schema analysis"
          fi

      - name: 📤 Upload Schema Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: schema-${{ matrix.environment }}
          path: temp/schema-analysis/
          retention-days: 30

  generate-entities:
    name: 🏗️ Generate Entities & Repositories
    runs-on: ubuntu-latest
    needs: analyze-schema
    if: needs.analyze-schema.outputs.schema-changed == 'true' || github.event.inputs.force_update == 'true'

    strategy:
      matrix:
        environment:
          - ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Download Schema Artifacts
        uses: actions/download-artifact@v4
        with:
          name: schema-${{ matrix.environment }}
          path: temp/schema-analysis/

      - name: 📦 Install Dependencies
        run: |
          npm install -g ts-node typescript
          npm install

      - name: 🏗️ Generate TypeORM Entities
        run: |
          echo "🏗️ Generating TypeORM entities..."

          SCHEMA_FILE="temp/schema-analysis/${{ matrix.environment }}-schema.json"

          # 기존 entities 백업 (선택적)
          if [ "${{ github.event.inputs.force_update }}" != "true" ] && [ -d "libs/database/src/entities" ]; then
            echo "📦 Backing up existing entities..."
            cp -r libs/database/src/entities temp/entities-backup
          fi

          # Entity 생성
          ts-node scripts/db-analyzer/entity-generator.ts "$SCHEMA_FILE" "libs/database/src/entities"

          echo "✅ Entity generation completed!"

      - name: 🔧 Generate Repository Extensions
        run: |
          echo "🔧 Generating repository extensions..."

          # Repository 확장 생성 스크립트 (필요시)
          # ts-node scripts/db-analyzer/repository-generator.ts

          echo "✅ Repository generation completed!"

      - name: 📝 Update Database Module
        run: |
          echo "📝 Updating DatabaseModule..."

          # DatabaseModule 자동 업데이트 스크립트
          # ts-node scripts/db-analyzer/module-updater.ts

          echo "✅ DatabaseModule updated!"

      - name: 🧪 Validate Generated Code
        run: |
          echo "🧪 Validating generated code..."

          # TypeScript 컴파일 체크
          npx tsc --noEmit --project libs/database/tsconfig.lib.json

          # Lint 체크
          npx eslint libs/database/src/entities --ext .ts --fix

          echo "✅ Code validation passed!"

      - name: 📊 Generate Summary Report
        run: |
          echo "📊 Generating summary report..."

          SCHEMA_FILE="temp/schema-analysis/${{ matrix.environment }}-schema.json"

          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## 🎉 Entity Generation Completed

          **Environment:** ${{ matrix.environment }}
          **Generated Entities:** $(jq '.tables | length' $SCHEMA_FILE)
          **Generated Procedures:** $(jq '.procedures | length' $SCHEMA_FILE)
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ### 📋 Generated Files
          \`\`\`
          $(find libs/database/src/entities -name "*.ts" -type f | sort)
          \`\`\`

          ### 🔗 Database Info
          - **Version:** $(jq -r '.database.version' $SCHEMA_FILE)
          - **Database:** $(jq -r '.database.database' $SCHEMA_FILE)
          - **Tables:** $(jq -r '.database.tableCount' $SCHEMA_FILE)
          - **Procedures:** $(jq -r '.database.procedureCount' $SCHEMA_FILE)
          EOF

      - name: 💾 Commit Generated Files
        run: |
          echo "💾 Committing generated files..."

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add libs/database/src/entities/
          git add scripts/db-analyzer/previous-schemas/ || true

          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            git commit -m "🤖 Auto-generated entities from ${{ matrix.environment }} DB schema
            
            - Generated $(jq '.tables | length' temp/schema-analysis/${{ matrix.environment }}-schema.json) entities
            - Updated from ${{ matrix.environment }} environment
            - Timestamp: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            
            [skip ci]"
            
            git push
            echo "✅ Changes committed and pushed!"
          fi

      - name: 🔄 Update Previous Schema
        run: |
          echo "🔄 Updating previous schema reference..."

          mkdir -p scripts/db-analyzer/previous-schemas/
          cp temp/schema-analysis/${{ matrix.environment }}-schema.json scripts/db-analyzer/previous-schemas/

          git add scripts/db-analyzer/previous-schemas/
          git commit -m "📋 Update ${{ matrix.environment }} schema reference [skip ci]" || echo "No schema changes to commit"
          git push || echo "No changes to push"

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [analyze-schema, generate-entities]
    if: always()

    steps:
      - name: 📢 Send Slack Notification
        if: needs.analyze-schema.outputs.schema-changed == 'true' || failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#database-updates'
          text: |
            🔄 Database Schema Sync: ${{ job.status }}

            **Environment:** ${{ github.event.inputs.environment || 'dev' }}
            **Entities:** ${{ needs.analyze-schema.outputs.entities-count }}
            **Procedures:** ${{ needs.analyze-schema.outputs.procedures-count }}
            **Changed:** ${{ needs.analyze-schema.outputs.schema-changed }}

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Send Email Summary (on failure)
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '❌ Database Schema Sync Failed'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'GitHub Actions <noreply@github.com>'
          body: |
            Database schema synchronization failed for environment: ${{ github.event.inputs.environment || 'dev' }}

            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}

            Please check the workflow logs for more details.

            Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
