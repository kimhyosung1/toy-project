name: 🔄 Branch-specific Database Sync

on:
  push:
    branches:
      - dev
      - qa 
      - production
    paths:
      - 'scripts/db-analyzer/**'
      - 'libs/database/**'
      - '.github/workflows/branch-db-sync.yml'
  
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force database sync regardless of changes'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  check-branch:
    name: 🔍 Branch Validation
    runs-on: ubuntu-latest
    outputs:
      should-sync: ${{ steps.branch-check.outputs.should-sync }}
      environment: ${{ steps.branch-check.outputs.environment }}
    
    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🔍 Check Branch and Set Environment
        id: branch-check
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"
          
          case "$BRANCH_NAME" in
            "dev")
              echo "should-sync=true" >> $GITHUB_OUTPUT
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "✅ Branch '$BRANCH_NAME' is allowed for database sync"
              ;;
            "qa")
              echo "should-sync=true" >> $GITHUB_OUTPUT
              echo "environment=qa" >> $GITHUB_OUTPUT
              echo "✅ Branch '$BRANCH_NAME' is allowed for database sync"
              ;;
            "production")
              echo "should-sync=true" >> $GITHUB_OUTPUT
              echo "environment=prod" >> $GITHUB_OUTPUT
              echo "✅ Branch '$BRANCH_NAME' is allowed for database sync"
              ;;
            *)
              echo "should-sync=false" >> $GITHUB_OUTPUT
              echo "environment=none" >> $GITHUB_OUTPUT
              echo "❌ Branch '$BRANCH_NAME' is not allowed for database sync"
              echo "Allowed branches: dev, qa, production"
              ;;
          esac

  database-sync:
    name: 🚀 Database Sync
    runs-on: ubuntu-latest
    needs: check-branch
    if: needs.check-branch.outputs.should-sync == 'true'
    
    outputs:
      sync-success: ${{ steps.sync.outputs.success }}
      has-changes: ${{ steps.sync.outputs.has-changes }}
      entities-count: ${{ steps.sync.outputs.entities-count }}
      repositories-count: ${{ steps.sync.outputs.repositories-count }}
      procedures-count: ${{ steps.sync.outputs.procedures-count }}

    steps:
      - name: 🛎️ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm install -g ts-node typescript
          npm install mysql2 class-transformer class-validator
          npm install

      - name: 🔧 Setup Database Connection
        run: |
          ENV="${{ needs.check-branch.outputs.environment }}"
          echo "Setting up database connection for environment: $ENV"
          
          case "$ENV" in
            "dev")
              echo "DB_HOST=${{ secrets.DEV_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.DEV_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USERNAME=${{ secrets.DEV_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.DEV_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_DATABASE=${{ secrets.DEV_DB_NAME }}" >> $GITHUB_ENV
              ;;
            "qa")
              echo "DB_HOST=${{ secrets.QA_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.QA_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USERNAME=${{ secrets.QA_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.QA_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_DATABASE=${{ secrets.QA_DB_NAME }}" >> $GITHUB_ENV
              ;;
            "prod")
              echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.PROD_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USERNAME=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_DATABASE=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 🚀 Execute Database Sync
        id: sync
        run: |
          echo "🚀 Starting database sync for ${{ needs.check-branch.outputs.environment }} environment..."
          
          # 변경사항 추적을 위한 초기 상태 저장
          git status --porcelain > /tmp/git_status_before.txt
          
          # run-enhanced-db-sync.sh 실행
          chmod +x scripts/run-enhanced-db-sync.sh
          
          if ./scripts/run-enhanced-db-sync.sh "${{ needs.check-branch.outputs.environment }}"; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "✅ Database sync completed successfully!"
            
            # 변경사항 확인
            git status --porcelain > /tmp/git_status_after.txt
            
            if ! diff -q /tmp/git_status_before.txt /tmp/git_status_after.txt > /dev/null; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "📝 Changes detected after database sync"
              
              # 변경된 파일 목록 출력
              echo "Changed files:"
              git status --porcelain
              
              # 통계 정보 수집 (가능한 경우)
              ENTITIES_COUNT=$(find libs/database/src/entities -name "*.ts" 2>/dev/null | wc -l || echo "0")
              REPOSITORIES_COUNT=$(find libs/database/src/repositories -name "*.ts" 2>/dev/null | wc -l || echo "0")
              PROCEDURES_COUNT=$(find libs/database/src/procedures -name "*.sql" 2>/dev/null | wc -l || echo "0")
              
              echo "entities-count=$ENTITIES_COUNT" >> $GITHUB_OUTPUT
              echo "repositories-count=$REPOSITORIES_COUNT" >> $GITHUB_OUTPUT
              echo "procedures-count=$PROCEDURES_COUNT" >> $GITHUB_OUTPUT
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "📝 No changes detected after database sync"
              echo "entities-count=0" >> $GITHUB_OUTPUT
              echo "repositories-count=0" >> $GITHUB_OUTPUT
              echo "procedures-count=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "❌ Database sync failed!"
            exit 1
          fi

      - name: 💾 Auto Commit and Push Changes
        if: steps.sync.outputs.success == 'true' && steps.sync.outputs.has-changes == 'true'
        run: |
          echo "💾 Auto-committing and pushing changes..."
          
          # Git 설정
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          # 변경된 파일들 추가
          git add libs/database/src/entities/
          git add libs/database/src/repositories/
          git add libs/database/src/procedures/
          
          # 다른 변경된 파일들도 추가 (있는 경우)
          git add -A
          
          # 커밋 메시지 생성
          COMMIT_MSG="🤖 Auto-sync database schema from ${{ needs.check-branch.outputs.environment }} environment
          
          📊 Sync Summary:
          - Environment: ${{ needs.check-branch.outputs.environment }}
          - Entities: ${{ steps.sync.outputs.entities-count }}
          - Repositories: ${{ steps.sync.outputs.repositories-count }}
          - Procedures: ${{ steps.sync.outputs.procedures-count }}
          
          🔧 Triggered by:
          - Branch: ${{ github.ref_name }}
          - Commit: ${{ github.sha }}
          - Actor: ${{ github.actor }}
          
          ⏰ Synced at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          [skip ci]"
          
          # 커밋 및 푸시
          git commit -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
          
          echo "✅ Changes committed and pushed successfully!"
          
          # 요약 생성
          echo "## 🎉 Database Sync Auto-Commit Results" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.check-branch.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Entities:** ${{ steps.sync.outputs.entities-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repositories:** ${{ steps.sync.outputs.repositories-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Procedures:** ${{ steps.sync.outputs.procedures-count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auto-committed:** ✅ Yes" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

      - name: 📝 No Changes Summary
        if: steps.sync.outputs.success == 'true' && steps.sync.outputs.has-changes == 'false'
        run: |
          echo "## 📝 Database Sync Results - No Changes" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.check-branch.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Changes:** 📝 No changes detected" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [check-branch, database-sync]
    if: always() && needs.check-branch.outputs.should-sync == 'true'

    steps:
      - name: 📢 Send Slack Notification
        if: needs.database-sync.outputs.sync-success == 'true' && needs.database-sync.outputs.has-changes == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#database-updates'
          text: |
            🤖 Auto Database Sync Completed!
            
            **Branch:** ${{ github.ref_name }}
            **Environment:** ${{ needs.check-branch.outputs.environment }}
            **Status:** ✅ Success & Auto-committed
            
            **Changes:**
            - Entities: ${{ needs.database-sync.outputs.entities-count }}
            - Repositories: ${{ needs.database-sync.outputs.repositories-count }}
            - Procedures: ${{ needs.database-sync.outputs.procedures-count }}
            
            **Repository:** ${{ github.repository }}
            **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 🚨 Send Failure Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#database-updates'
          text: |
            🚨 Database Sync Failed!
            
            **Branch:** ${{ github.ref_name }}
            **Environment:** ${{ needs.check-branch.outputs.environment }}
            **Status:** ❌ Failed
            
            **Repository:** ${{ github.repository }}
            **Workflow:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Please check the workflow logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
