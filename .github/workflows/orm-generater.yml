name: 🔄 Branch-specific Database Sync

on:
  push:
    branches: [qa, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to sync (dev/qa/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  NODE_VERSION: '22'

jobs:
  database-sync:
    name: 🚀 Database Sync & Auto Commit
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: ⏳ Wait for Main Services CI/CD to complete
        if: github.event_name == 'push'
        run: |
          echo "⏳ Waiting for Main Services CI/CD to complete..."
          echo "This ensures DB sync runs after Docker builds are done"
          sleep 300  # 5분 대기 (Main Services CI/CD 완료 대기)

      - name: 🔍 Environment Info
        run: |
          echo "🔍 Workflow Info:"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Manual Environment: ${{ github.event.inputs.environment || 'N/A' }}"
      - name: 🚫 Skip Auto-Commit Loops
        run: |
          # 자동 커밋에서 온 경우 스킵
          if [ "${{ github.event_name }}" = "push" ]; then
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if echo "$COMMIT_MSG" | grep -qE "\[skip ci\]|\[ci skip\]|🤖 Auto-sync"; then
              echo "🤖 Auto-commit detected, skipping ORM generation"
              echo "SKIP_ORM=true" >> $GITHUB_ENV
            else
              echo "👤 Manual commit detected, proceeding with ORM generation"
              echo "SKIP_ORM=false" >> $GITHUB_ENV
            fi
          else
            echo "🔧 Manual workflow dispatch, proceeding with ORM generation"
            echo "SKIP_ORM=false" >> $GITHUB_ENV
          fi

      - name: 🛎️ Checkout Repository
        if: env.SKIP_ORM != 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        if: env.SKIP_ORM != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Global Dependencies
        if: env.SKIP_ORM != 'true'
        run: |
          npm install -g ts-node typescript

      - name: 🔧 Setup Database Environment
        if: env.SKIP_ORM != 'true'
        run: |
          case "${{ github.ref_name }}" in
            "dev")
              # DEV 환경 하드코딩 (env/dev.env 참조)
              echo "DB_HOST=localhost" >> $GITHUB_ENV
              echo "DB_PORT=3306" >> $GITHUB_ENV
              echo "DB_USERNAME=root" >> $GITHUB_ENV
              echo "DB_PASSWORD=" >> $GITHUB_ENV
              echo "DB_DATABASE=public" >> $GITHUB_ENV
              ;;
            "qa")
              echo "DB_HOST=${{ secrets.QA_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.QA_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USERNAME=${{ secrets.QA_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.QA_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_DATABASE=${{ secrets.QA_DB_NAME }}" >> $GITHUB_ENV
              ;;
            "production")
              echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
              echo "DB_PORT=${{ secrets.PROD_DB_PORT }}" >> $GITHUB_ENV
              echo "DB_USERNAME=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
              echo "DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
              echo "DB_DATABASE=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 🚀 Run Database Sync & Auto Commit
        if: env.SKIP_ORM != 'true'
        run: |
          # 환경 매핑 (수동 실행 시 입력값 우선)
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENV_NAME="${{ github.event.inputs.environment }}"
          else
            ENV_NAME="${{ github.ref_name }}"
            if [ "$ENV_NAME" = "production" ]; then
              ENV_NAME="prod"
            fi
          fi

          echo "🚀 Running database sync for $ENV_NAME environment..."

          # 변경사항 추적
          git status --porcelain > /tmp/before.txt

          # DB 동기화 실행
          chmod +x scripts/run-enhanced-db-sync.sh
          ./scripts/run-enhanced-db-sync.sh "$ENV_NAME"

          # 변경사항 확인 및 커밋
          git status --porcelain > /tmp/after.txt

          if ! diff -q /tmp/before.txt /tmp/after.txt > /dev/null; then
            echo "📝 Changes detected, committing..."
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action Bot"
            
            git add -A
            git commit -m "🤖 Auto-sync database schema from $ENV_NAME environment [skip ci]"
            git push origin ${{ github.ref_name }}
            
            echo "✅ Changes committed and pushed!"
          else
            echo "📝 No changes detected"
          fi

      - name: 📋 ORM Generation Summary
        if: always()
        run: |
          if [ "${{ env.SKIP_ORM }}" = "true" ]; then
            echo "🤖 ORM Generation skipped - Auto-commit loop prevention"
            echo "This prevents infinite CI/CD loops from auto-generated commits"
          else
            echo "✅ ORM Generation completed successfully"
            echo "Database schema has been synchronized"
          fi
